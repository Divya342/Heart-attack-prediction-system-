# -*- coding: utf-8 -*-
"""heartattack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ULk8A3OncoxJ9MpuU-WkrsGNlA7wKeSE
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import plotly as plot
import plotly.express as px
import plotly.graph_objs as go

import cufflinks as cf
import matplotlib.pyplot as plt
import seaborn as sns
import os
from sklearn.metrics import accuracy_score,mean_squared_error
import plotly.offline as pyo
from plotly.offline import init_notebook_mode,plot,iplot

path="/content/drive/MyDrive/dileep.csv"
dileep=pd.read_csv(path)
dileep

info = ["age","1: male, 0: female"," serum cholestoral in mg/dl","fasting blood sugar > 120 mg/dl","resting electrocardiographic results (values 0,1,2)"," maximum heart rate achieved"]



for i in range(len(info)):
    print(dileep.columns[i]+":\t\t\t"+info[i])

dileep['target']t

dileep.groupby('target').size()

dileep.groupby('target').sum()

dileep.shape

dileep.size

dileep.describe()

dileep.info()

dileep['target'].unique()

#Visualization

dileep.hist(figsize=(14,14))
plt.show()

plt.bar(x=dileep['sex'],height=dileep['age'])
plt.show()

sns.barplot(x="restecg", y="target", data=dileep)
plt.show()

sns.barplot(x=dileep['sex'],y=dileep['age'],hue=dileep['target'])

px.bar(dileep,dileep['sex'],dileep['target'])

sns.distplot(dileep["chol"])

sns.pairplot(dileep,hue='target')

dileep

numeric_columns=['fbs','chol','thalach','age']

sns.pairplot(dileep[numeric_columns])

dileep['target']

y = dileep["target"]

sns.countplot(y)

target_temp = dileep.target.value_counts()

print(target_temp)

# create a correlation heatmap
sns.heatmap(dileep[numeric_columns].corr(),annot=True, cmap='terrain', linewidths=0.1)
fig=plt.gcf()
fig.set_size_inches(8,6)
plt.show()

# create four distplots
plt.figure(figsize=(12,10))
plt.subplot(221)
sns.distplot(dileep[dileep['target']==0].age)
plt.title('Age of patients without heart disease')
plt.subplot(222)
sns.distplot(dileep[dileep['target']==1].age)
plt.title('Age of patients with heart disease')
plt.subplot(223)
sns.distplot(dileep[dileep['target']==0].thalach )
plt.title('Max heart rate of patients without heart disease')
plt.subplot(224)
sns.distplot(dileep[dileep['target']==1].thalach )
plt.title('Max heart rate of patients with heart disease')
plt.show()

plt.figure(figsize=(13,6))
plt.subplot(121)
sns.violinplot(x="target", y="thalach", data=dileep, inner=None)
sns.swarmplot(x="target", y="thalach", data=dileep, color='w', alpha=0.5)


plt.subplot(122)
sns.swarmplot(x="target", y="thalach", data=dileep)
plt.show()

dileep

# create pairplot and two barplots
plt.figure(figsize=(16,6))
plt.subplot(131)
sns.pointplot(x="sex", y="target", data=dileep)
plt.legend(['male = 1', 'female = 0'])
plt.subplot(132)
sns.barplot(x="restecg", y="target", data=dileep)
plt.legend(['yes = 1', 'no = 0'])
plt.subplot(133)
sns.countplot(x="thalach", hue='target', data=dileep)
plt.show()

dileep['target'].value_counts()

dileep['target'].isnull()

dileep['target'].sum()

dileep['target'].unique()

dileep.isnull().sum()

X,y=dileep,dileep.target

X.drop('target',axis=1,inplace=True)

y

####Or X, y = heart.iloc[:, :-1], heart.iloc[:, -1]

X.shape

y.shape

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
X = sc.fit_transform(X)

X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=10,test_size=0.3,shuffle=True)

X_test

y_test

print ("train_set_x shape: " + str(X_train.shape))
print ("train_set_y shape: " + str(y_train.shape))
print ("test_set_x shape: " + str(X_test.shape))
print ("test_set_y shape: " + str(y_test.shape))

# Model

# Decision Tree Classifier
scores_dict = {}

Catagory=['No','Yes you have Heart Disease']

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier()
dt.fit(X_train,y_train)

prediction=dt.predict(X_test)
accuracy_dt=accuracy_score(y_test,prediction)*100

scores_dict['DecisionTreeClassifier'] = accuracy_dt
print(accuracy_dt)

print("Accuracy on training set: {:.3f}".format(dt.score(X_train, y_train)))
print("Accuracy on test set: {:.3f}".format(dt.score(X_test, y_test)))

prediction

X_DT=np.array([[63,1,140,212,1,168]])
X_DT_prediction=dt.predict(X_DT)

X_DT_prediction[0]

Catagory[int(X_DT_prediction[0])]

#Feature Importance in Decision Trees

print("Feature importances:\n{}".format(dt.feature_importances_))

prediction=dt.predict(X_test)
accuracy_dt=accuracy_score(y_test,prediction)*100

scores_dict['DecisionTreeClassifier'] = accuracy_dt
print(accuracy_dt)

#Models
import pickle
pickle.dump(dt,open('model.pkl','wb'))
pickle.dump(sc,open('sc.pkl','wb'))

######Accuracy
from sklearn import metrics
confusion_matrix = metrics.confusion_matrix(y_test,prediction)
confusion_matrix

import pickle
import numpy as np
from twilio.rest import Client

path1='/content/drive/MyDrive/sc (2).pkl'
path2='/content/drive/MyDrive/model (2).pkl'
sc = pickle.load(open(path1, 'rb'))
model = pickle.load(open(path2, 'rb'))
print("\n\n")
age = int(input("Enter Age : "))
se = int(input(" Enter Gender (1 or 0): "))
fbs = int(input("Enter fasting glucose level : "))
chol = int(input("Enter Serum Cholesterol : "))
restecg = int(input("Enter resting electrocardiographic results : "))
thalach = int(input("Enter maximum heart rate achieved :"))


# Test Set
new = [age, se,tresbbp, chol, restecg,
       thalach]
'''# Another Sets
x = [52, 1, 0, 125, 212, 0, 1, 168,	0, 1.0, 2,	2, 3]
inputs = [63, 1, 3, 145, 233, 1, 0, 150, 0, 2.3, 0, 0, 1]'''

input = np.array([new])
input = sc.transform(input)
output = model.predict(input)
if(int(output == 0)):
    print("\n------Normal State ")
else:
    print("\n-------Abnormal")

accoun_sid='ACfc86854138e118fdf81366f3faec8c39'
auth_token='cb2c3a37204f3a03db1336c0d4c40cc1'
client=Client(accoun_sid,auth_token)
if(int(output ==0)):
  message=client.messages.create(body=("----Normal State",output),from_='+15855802827', to='+918688747438')
else:
  message=client.messages.create(body=("Abnormal",output),from_='+15855802827', to='+918688747438')



from google.colab import files
files.download('sc.pkl')

pip install twilio

